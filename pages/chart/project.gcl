use util;
use math;

enum Confidence {
  High;
  Medium;
  Low;
}

@expose
fn random_table(nbRows: int) {
  if (nbRows < 5) {
    throw "min nbRows 5";
  }

  var LINE_COL = 0;
  var SCATTER_COL = 1;
  var AREA_COL = 2;
  var BAR_COL = 3;
  var LINE_TYPE_COL = 4;
  var LINE_COLOR_COL = 5;

  var prev1 = 100_f;
  var prev2 = 80_f;

  var table = Table::new(6);
  var rand = Random::new();

  for (var rowIdx = 0; rowIdx < nbRows; rowIdx++) {
    prev1 = prev1 + 5 - rand.uniformf(0_f, 1_f) * 10;
    prev1 = maxf(0_f, prev1);

    table.set(rowIdx, LINE_COL, prev1);
    table.set(rowIdx, AREA_COL, rand.uniform((prev1 as int) - 10,(prev1 as int) + 10));
    if (rowIdx >= 20 && rowIdx <= 45) {
      // dashed
      table.set(rowIdx, LINE_TYPE_COL, 1);
      table.set(rowIdx, LINE_COLOR_COL, Confidence::Low);
    } else if (rowIdx >= 80 && rowIdx <= 100) {
      table.set(rowIdx, LINE_COLOR_COL, Confidence::Medium);
    } else {
      // solid
      table.set(rowIdx, LINE_TYPE_COL, 0);
      table.set(rowIdx, LINE_COLOR_COL, Confidence::High);
    }

    prev2 = prev2 + 5 - rand.uniformf(0_f, 1_f) * 10;
    prev2 = maxf(0_f, prev2);

    table.set(rowIdx, SCATTER_COL, prev2);

    if (rowIdx >= 0 && rowIdx < 5) {
      table.set(rowIdx, BAR_COL, rand.uniform(1, 40));
    }

    if (rowIdx >= (nbRows - 5) && rowIdx < nbRows) {
      table.set(rowIdx, BAR_COL, rand.uniform(1, 40));
    }

    if (rowIdx == 10) {
      table.set(rowIdx, LINE_COL, null);
    }

    if (rowIdx == 75) {
      table.set(rowIdx, LINE_COL, null);
    }
  }

  return table;
}