fn main() {
  for (var i = 0; i < 15; i++) {
    SecurityEntity::set(UserGroup {
        id: 0,
        name: "group-${i}",
        activated: true,
      });
  }
}

type Person2 {
  name: String;
  age: int;
  children: int;
}

@expose
fn persons() {
  return [
    Person2 { name: "John", age: 42, children: 2 },
    Person2 { name: "Bob", age: 64, children: 4 },
    Person2 { name: "Max", age: 35, children: 0 },
  ];
}

// pages/chart start
enum Confidence {
  High;
  Medium;
  Low;
}

// @expose
// fn boxplot_float() {
//   var histogram = HistogramFloat {};

//   var random = Random::new();
//   random.setSeed(12345);
//   var testSize = 10;

//   for (var i = 0; i < testSize; i++) {
//     var v = random.uniformf(-100.0, 100.0);
//     histogram.add(v);
//   }

//   return histogram.toBoxPlot();
// }

@expose
fn chart(nbRows: int) {
  if (nbRows < 5) {
    throw "min nbRows 5";
  }

  var LINE_COL = 0;
  var SCATTER_COL = 1;
  var AREA_COL = 2;
  var BAR_COL = 3;
  var LINE_TYPE_COL = 4;
  var LINE_COLOR_COL = 5;

  var prev1 = 100_f;
  var prev2 = 80_f;

  var table = Table {};

  var rand = Random {};

  for (var rowIdx = 0; rowIdx < nbRows; rowIdx++) {
    prev1 = prev1 + 5 - rand.uniformf(0_f, 1_f) * 10;
    prev1 = maxf(0_f, prev1);

    table.set_cell(rowIdx, LINE_COL, prev1);
    table.set_cell(rowIdx, AREA_COL, rand.uniform((prev1 as int) - 10, (prev1 as int) + 10));
    if (rowIdx >= 20 && rowIdx <= 45) {
      // dashed
      table.set_cell(rowIdx, LINE_TYPE_COL, 1);
      table.set_cell(rowIdx, LINE_COLOR_COL, Confidence::Low);
    } else if (rowIdx >= 80 && rowIdx <= 100) {
      table.set_cell(rowIdx, LINE_COLOR_COL, Confidence::Medium);
    } else {
      // solid
      table.set_cell(rowIdx, LINE_TYPE_COL, 0);
      table.set_cell(rowIdx, LINE_COLOR_COL, Confidence::High);
    }

    prev2 = prev2 + 5 - rand.uniformf(0_f, 1_f) * 10;
    prev2 = maxf(0_f, prev2);

    table.set_cell(rowIdx, SCATTER_COL, prev2);

    if (rowIdx >= 0 && rowIdx < 5) {
      table.set_cell(rowIdx, BAR_COL, rand.uniform(1, 40));
    }

    if (rowIdx >=(nbRows - 5) && rowIdx < nbRows) {
      table.set_cell(rowIdx, BAR_COL, rand.uniform(1, 40));
    }

    if (rowIdx == 10) {
      table.set_cell(rowIdx, LINE_COL, null);
    }

    if (rowIdx == 75) {
      table.set_cell(rowIdx, LINE_COL, null);
    }
  }

  return table;
}
// pages/chart end

// pages/chart-time start
@expose
fn chart_time(): Table {
  var rand = Random {};

  var table = Table {};

  var min = -10.0;
  var max = 40.0;
  var prevTime = time::now();
  var prevTemp = rand.uniformf(min, max);

  // purposedly start with null values to test out the behavior
  table.set_cell(0, 0, prevTime);
  table.set_cell(0, 1, null);
  table.set_cell(0, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(1, 0, prevTime);
  table.set_cell(1, 1, null);
  table.set_cell(1, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(2, 0, prevTime);
  table.set_cell(2, 1, null);
  table.set_cell(2, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(3, 0, prevTime);
  table.set_cell(3, 1, null);
  table.set_cell(3, 2, null);
  prevTime = prevTime + 1_hour;

  for (var i = 4; i < 500; i++) {
    table.set_cell(i, 0, prevTime);
    table.set_cell(i, 1, prevTemp);
    if (prevTemp < 10) {
      table.set_cell(i, 2, "low");
    } else if (prevTemp >= 10 && prevTemp <= 25) {
      table.set_cell(i, 2, "normal");
    } else {
      table.set_cell(i, 2, "high");
    }

    prevTime = prevTime + 1_hour;
    if (prevTemp >= max) {
      prevTemp = prevTemp + rand.uniformf(-5.0, -0.1);
    } else if (prevTemp <= min) {
      prevTemp = prevTemp + rand.uniformf(0.1, 5.0);
    } else {
      prevTemp = prevTemp + rand.uniformf(-2.5, 2.5);
    }
  }

  // put some null at the end also for tests
  var row = table.rows();
  table.set_cell(row, 0, prevTime);
  table.set_cell(row, 1, null);
  table.set_cell(row, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(row + 1, 0, prevTime);
  table.set_cell(row + 1, 1, null);
  table.set_cell(row + 1, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(row + 2, 0, prevTime);
  table.set_cell(row + 2, 1, null);
  table.set_cell(row + 2, 2, null);

  return table;
}
// pages/chart-time end

// pages/chart-colored-area start
@expose
fn chart_colored_area(): Table {
  var firstTime = time::now();
  var rand = Random {};

  var table = Table {};
  // 0
  table.set_cell(0, 0, firstTime - 6_day);
  table.set_cell(0, 1, -10.5);
  table.set_cell(0, 2, "low");
  // 1
  table.set_cell(1, 0, firstTime - 5_day);
  table.set_cell(1, 1, -8.5);
  table.set_cell(1, 2, "low");
  // 2
  table.set_cell(2, 0, firstTime - 4_day);
  table.set_cell(2, 1, 3.1);
  table.set_cell(2, 2, "low");
  // 3
  table.set_cell(3, 0, firstTime - 3_day);
  table.set_cell(3, 1, 33.7);
  table.set_cell(3, 2, "high");
  // 4
  table.set_cell(4, 0, firstTime - 2_day);
  table.set_cell(4, 1, 22.0);
  table.set_cell(4, 2, "normal");
  // 5
  table.set_cell(5, 0, firstTime - 1_day);
  table.set_cell(5, 1, 18.9);
  table.set_cell(5, 2, "normal");
  // 6
  table.set_cell(6, 0, firstTime);
  table.set_cell(6, 1, 6.4);
  table.set_cell(6, 2, "low");

  return table;
}
// pages/chart-colored-area end

// pages/donut start
@expose
fn donut(): Table {
  var nbRows = 5;
  var table = Table {};

  var continents = ["Africa", "Antartica", "Asia", "Europe", "North America", "South America", "Oceania"];
  var countries = [54, 0, 49, 44, 23, 12, 14];

  for (row, continent in continents) {
    table.set_cell(row, 0, continent);
    table.set_cell(row, 1, countries[row]);
  }

  return table;
}
// pages/donut end

// pages/enum-select start
enum TrafficLight {
  Green;
  Yellow;
  Red;
}
// pages/enum-select end

// pages/heatmap start
@expose
fn heatmap() {
  var table = Table {};

  //                           ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  var paris = Array<float> {4.9, 5.6, 8.8, 11.4, 15.1, 18.2, 20.4, 20.2, 16.9, 12.9, 8.1, 5.4};
  var london = Array<float> {5.2, 5.3, 7.6, 9.9, 13.3, 16.5, 18.7, 18.5, 15.7, 12.0, 8.0, 5.5};
  var newyork = Array<float> {0.6, 2.1, 6.1, 11.9, 17.1, 22.1, 24.9, 24.3, 20.2, 14.1, 8.9, 3.3};
  var beijing = Array<float> {-3.1, 0.3, 6.7, 14.8, 20.8, 24.9, 26.7, 25.5, 20.8, 13.7, 5.0, -0.9};
  var perth = Array<float> {24.5, 24.9, 23.1, 19.7, 16.5, 14.0, 13.0, 13.5, 14.8, 17.3, 20.3, 22.7};
  var oslo = Array<float> {-4.3, -4.0, -0.2, 4.5, 10.8, 15.2, 16.4, 15.2, 10.8, 6.3, 0.7, -3.1};

  var cities = Array<Array<float>> { paris, london, newyork, beijing, perth, oslo };

  for (row, city in cities) {
    for (col, temp in city) {
      table.set_cell(row, col, temp);
    }
  }

  return table;
}
// pages/heatmap end

// pages/hello start
@expose
fn hello(name: String): String {
  return "Hello, ${name}";
}
// pages/hello end

// // pages/histogram
// @expose
// fn histogram_table(): Table {
//   var csvFormat = CsvFormat {};
//   csvFormat.separator = ',';
//   csvFormat.header_lines = 1;
//   var csv = CsvReader { path: "pages/chart-bar-histogram/heightweight.csv", format: csvFormat };

//   var histogramHeight = HistogramFloat {};
//   var histogramWeight = HistogramFloat {};
//   while (csv.available() > 0) {
//     var res = csv.read();
//     var height_inch = res?[1] as float;
//     var weight_pound = res?[2] as float; 

//     var height_cm = height_inch * 2.54;
//     var weight_kg = weight_pound * 0.453592;

//     histogramHeight.add(height_cm);
//     histogramWeight.add(weight_kg);
//   }

//   return histogramHeight.all();
// }
// // pages/histogram end

@expose
fn table(): Table {
  var rand = Random {};

  var table = Table {};

  var min = -10.0;
  var max = 40.0;
  var prevTime = time::now();
  var prevTemp = rand.uniformf(min, max);

  // purposedly start with null values to test out the behavior
  table.set_cell(0, 0, prevTime);
  table.set_cell(0, 1, null);
  table.set_cell(0, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(1, 0, prevTime);
  table.set_cell(1, 1, null);
  table.set_cell(0, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(2, 0, prevTime);
  table.set_cell(2, 1, null);
  table.set_cell(0, 2, null);
  prevTime = prevTime + 1_hour;
  table.set_cell(3, 0, prevTime);
  table.set_cell(3, 1, null);
  table.set_cell(0, 2, null);
  prevTime = prevTime + 1_hour;

  for (var i = 4; i < 500; i++) {
    table.set_cell(i, 0, prevTime);
    table.set_cell(i, 1, prevTemp);
    if (prevTemp < 10) {
      table.set_cell(i, 2, "low");
    } else if (prevTemp >= 10 && prevTemp <= 25) {
      table.set_cell(i, 2, "normal");
    } else {
      table.set_cell(i, 2, "high");
    }

    prevTime = prevTime + 1_hour;
    if (prevTemp >= max) {
      prevTemp = prevTemp + rand.uniformf(-5.0, -0.1);
    } else if (prevTemp <= min) {
      prevTemp = prevTemp + rand.uniformf(0.1, 5.0);
    } else {
      prevTemp = prevTemp + rand.uniformf(-2.5, 2.5);
    }
  }

  return table;
}
// pages/table end

// pages/tasks start
@expose
fn task_without_params() {
  for (var i = 0; i < 100; i++) {
    println("test");
  }
  return 42;
}

@expose
fn task_with_params(name: String, age: int) {
  return name;
}

@expose
fn task_long_running() {
  var progress = ProgressTracker {
    start: time::now(),
    total: 60,
  };
  for (var i = 0; i < 60; i++) {
    progress.update(i + 1);
    Task::progress(progress.progress ?? 0.0);
    Runtime::sleep(1_s);
  }
}

@expose
fn mainTask() {
  Task::spawn(TaskRequest { function: project::subTask, arguments: Array<any?> {0} });
  Task::spawn(TaskRequest { function: project::subTask, arguments: Array<any?> {1} });
}

fn subTask(id: int) {
  return id;
}
// pages/tasks end

// pages/users start
@expose
@permission("foo")
fn foo() {}

@expose
@permission("bar")
fn bar() {}
// pages/users end

// pages/object start
type ComplexObject {
  string: String;
  int: int;
  float: float;
  bool: bool;
  char: char;
  geo: geo;
  null: any?;
  enum: TimeZone;
  array: Array;
  nodeTime: nodeTime;
  nodeIndex: nodeIndex;
  nodeList: nodeList;
  nodeGeo: nodeGeo;
  nested: any?;
  nodeNested: node<ComplexObject>?;
  map: Map<String, any>;
  tuple: Tuple<any, any>;
}

@expose
@write
fn complex_object() {
  var map = Map<String, any> {};
  map.set("first", ("BAR", 42));
  map.set("second", TimeZone::Africa_Abidjan);

  var array = [42, 3.14, "hello world"];
  for (var i = 0; i < 100; i++) {
    array.add(i);
  }

  return ComplexObject {
    string: "Hello, world!",
    int: 42,
    float: 3.14,
    bool: false,
    char: 'd',
    geo: geo { 1.4, -0.85 },
    null: null,
    enum: TimeZone::Europe_Paris,
    array: array,
    nodeTime: nodeTime {},
    nodeIndex: nodeIndex {},
    nodeList: nodeList {},
    nodeGeo: nodeGeo {},
    tuple: Tuple<String, String> { x: "This is", y: "a tuple" },
    nested: ComplexObject {
      string: "Hello, world!",
      int: 42,
      float: 3.14,
      bool: false,
      char: 'd',
      geo: geo { 1.4, -0.85 },
      map: Map<String, any> {},
      tuple: Tuple<int, int> { x: 1337, y: 42 },
      null: null,
      array: [42, 3.14, "hello world"],
      nodeTime: nodeTime {},
      nodeIndex: nodeIndex {},
      nodeList: nodeList {},
      nodeGeo: nodeGeo {},
      enum: TimeZone::Europe_Luxembourg,
    },
    nodeNested: node<ComplexObject> { ComplexObject { string: "Nested Hello, world!", int: 1337, float: 3.1415, bool: true, char: 'g', geo: geo::max, null: null, enum: TimeZone::Asia_Tokyo, array: Array<any?> {1337, 3.1415, "GreyCat"}, nodeTime: nodeTime {}, nodeIndex: nodeIndex {}, nodeList: nodeList {}, nodeGeo: nodeGeo {}, nested: [], map: Map<String, ComplexObject> {}, tuple: Tuple<String, bool> { x: "Another tuple", y: false } } },
    map: map,
  };
}

@expose
fn obj1() {
  return Obj1 {
    prop1: "Hello",
    prop2: User { id: 1000, name: "user1", activated: false, external: false },
    prop3: Runtime::info(),
  };
}

@expose
fn obj2() {
  var prop3 = Map<any, any?> {};
  for (var i = 0; i < 25; i++) {
    prop3.set("entry-${i}", Runtime::info());
  }

  return Obj2 {
    prop1: "Hello",
    prop2: [
      User { id: 1000, name: "user1", activated: false, external: false },
      User { id: 1001, name: "user2", activated: false, external: false },
    ],
    prop3: prop3,
    prop4: mapTest(),
  };
}
// pages/object end

type SemiRecursive {
  sub: SemiRecursive?;
}

type FooBar {}

@expose
fn add(a: int, b: int): int {
  println("add(${a}, ${b}) = ${a + b}");
  return a + b;
}

@expose
fn anything(v: any?) {
  return v;
}


@expose
fn mapTest() {
  var map = Map<DurationUnit, Tuple<String, int>> {};
  map.set(DurationUnit::seconds, Tuple<String, int> { x: "seconds", y: 1 });
  map.set(DurationUnit::minutes, Tuple<String, int> { x: "minutes", y: 2 });
  map.set(DurationUnit::hours, Tuple<String, int> { x: "hours", y: 3 });
  return map;
}

@expose
fn goodFnForTestingFnCallInput(name: String, flag: bool, item: DurationUnit, optionalFlag: bool?) {}

@expose
fn now() {
  var now = time::now();
  return TimeZones {
    azores: Date::fromTime(now, TimeZone::Atlantic_Azores),
    utc: Date::fromTime(now, TimeZone::UTC),
    paris: Date::fromTime(now, TimeZone::Europe_Paris),
    athens: Date::fromTime(now, TimeZone::Europe_Athens),
  };
}

enum SensorKind {
  Temp;
  Pressure;
}

type Sensor {
  id: int;
  kind: SensorKind;
}

type Link {
  name: String;
  next: Link?;

  @expose
  static fn whatever(link: node<Link>) {
    // 
  }
}

@expose
fn link_whatever(l: node<Link>) {
  // 
}

@expose
fn big_map(): Map {
  var map = Map<any, any?> {};
  for (var i = 0; i < 1000; i++) {
    map.set("entry-${i}", Tuple<String, float> { x: "${i}", y: i * 3.14 });
  }
  return map;
}

@expose
fn one_d_histo_example(): Histogram {
  var quant = LinearQuantizer { min: 0.0, max: 10.0, bins: 100 };
  var histo = Histogram { quantizer: quant };
  var rand = Random {};
  for (var i = 0; i < 1000; i++) {
    var val = rand.normal(5.0, 2.0);
    histo.add(val);
  }

  return histo;
}

// @expose
// fn two_d_histo_example(): Histogram {
//   var quant = MultiQuantizer {
//     dimensions: [
//       LinearQuantizer { min: 5.0, max: 10.0, bins: 100 },
//       LinearQuantizer { min: 0.0, max: 5.0, bins: 100 },
//     ]
//   };
//   var histo = Histogram { quantizer: quant };

//   var rand = Random {};
//   for (var i = 0; i < 10000; i++) {
//     var val = rand.normal(2.5, 1.0);
//     var val2 = rand.normal(7.5, 1.0);
//     histo.add([val2, val]);
//   }

//   return histo;
// }
type Obj1 {
  prop1: String;
  prop2: User;
  prop3: RuntimeInfo;
}
type TimeZones {
  azores: Date;
  utc: Date;
  paris: Date;
  athens: Date;
}
type Obj2 {
  prop1: String;
  prop2: Array<User>;
  prop3: Map<any, any?>;
  prop4: any?;
}
