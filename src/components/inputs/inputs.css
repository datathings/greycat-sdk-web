gui-input,
gui-input-string,
gui-input-number,
gui-input-bool,
gui-input-enum {
  display: contents;
}

gui-input-geo {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: start;
  gap: var(--spacing);

  > label {
    align-self: center;
  }
}

gui-input-object {
  display: flex;

  /* Remove button */
  > sl-button {
    padding: 0 var(--spacing);
    align-self: center;
  }

  > div {
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: start;
    gap: var(--spacing);

    > label {
      display: flex;
      flex-direction: column;
      align-items: end;
      gap: 2px;
    }
  }

  > sl-input + div {
    padding-left: var(--spacing);
    border-left: var(--sl-color-primary-100) solid var(--spacing);
  }
}

gui-input-array {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--spacing);

  /* Add button */
  > sl-button {
    width: fit-content;
    padding: 0 var(--spacing);
  }

  > .gui-input-array-entry {
    display: grid;
    grid-template-columns: auto 1fr;
    column-gap: var(--spacing);
    align-items: baseline;

    /* Remove button */
    > sl-button {
      padding: 0 var(--spacing);
    }

    > :last-child {
      width: 100%;
    }
  }
}

gui-input-map {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--spacing);

  /* Add button */
  > sl-button {
    width: fit-content;
    padding: 0 var(--spacing);
  }

  > div {
    display: grid;
    grid-template-columns: auto 1fr 1fr;
    gap: var(--spacing);
    align-items: baseline;

    /* remove button */
    > sl-button {
      padding: 0 var(--spacing);
    }
  }
}

gui-input-duration {
  display: grid;
  grid-template-columns: 1fr 1fr;

  gui-input-number sl-input::part(base) {
    border-radius: var(--border-radius) 0 0 var(--border-radius);
  }

  gui-searchable-select sl-input::part(base) {
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    border-left: none;
  }
}

/* TODO Simplify selector conditions **/
gui-input-any {
  display: grid;
  grid-template-columns: 1fr 1fr;

  > gui-searchable-select:first-child sl-input::part(base) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  gui-searchable-select + gui-input {
    &:not(:has(gui-input-array, gui-input-map, gui-input-object, gui-input-geo)) {
      sl-input::part(base) {
        border-left: none;
      }

      sl-select::part(combobox) {
        border-left: none;
      }
    }

    &:not(:has(gui-input-duration)) {
      sl-input::part(base) {
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
      }
    }

    &:has(gui-input-duration) {
      gui-input-duration sl-input::part(base) {
        border-radius: 0 0 0 0;
      }
    }

    sl-select::part(combobox) {
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
    }
  }

  gui-searchable-select + gui-input {
    margin-left: var(--spacing);

    gui-input-map,
    gui-input-array {
      margin-left: var(--spacing);
      border-left: var(--sl-color-neutral-100) solid var(--border-width);
    }

    gui-input-object,
    gui-input-geo {
      margin-left: var(--spacing);
      padding-left: var(--spacing);
      border-left: var(--sl-color-neutral-100) solid var(--border-width);
    }
  }
}

.gui-input-attr-name,
.gui-input-param-name {
  font-size: var(--sl-font-size-medium);
  line-height: var(--sl-font-size-medium);
}

.gui-input-attr-type,
.gui-input-param-type {
  font-size: var(--sl-font-size-small);
  line-height: var(--sl-font-size-small);
  color: var(--sl-color-gray-500);
}
